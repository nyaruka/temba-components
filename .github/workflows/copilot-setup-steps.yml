name: 'Copilot Setup Steps'

# Triggers: Run on pull requests and pushes to prepare environment for agent tasks
on:
  pull_request:
  push:

jobs:
  copilot-setup-steps:
    # Only run when push is initiated by the Copilot agent (GitHub Actions bot)
    # This avoids unnecessary runs on regular developer pushes
    if: github.actor == 'github-actions[bot]'
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Setup Node.js environment with version matching the project (Node.js 20)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      # Setup Chrome browser for Puppeteer tests to avoid firewall issues
      # This uses the official Chrome setup that handles firewall restrictions
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable
          
      # Cache yarn dependencies to speed up future runs
      # Uses yarn.lock as the cache key for dependency consistency
      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      # Cache Puppeteer browsers to avoid repeated downloads
      - name: Cache Puppeteer browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/puppeteer
            node_modules/.cache/puppeteer
          key: ${{ runner.os }}-puppeteer-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-puppeteer-
      
      # Install project dependencies including Puppeteer with Chromium
      # Now allows Puppeteer to download Chromium since we handle firewall issues
      - name: Install dependencies
        run: yarn install
        env:
          # Set Puppeteer to use system Chrome if available to avoid downloads
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
      
      # Pre-build the project to warm up the environment
      # This compiles TypeScript, processes SVG icons, and creates distribution files
      - name: Build project
        run: yarn build
        
      # Run tests to ensure Puppeteer setup works correctly
      # This validates that the browser dependencies are properly configured
      # - name: Validate Puppeteer setup
      #  run: yarn test --reporter=summary
      #  env:
      #    PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
        
      # Cache the built output to speed up subsequent operations
      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            dist
            out-tsc
            static/svg/index.svg
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
